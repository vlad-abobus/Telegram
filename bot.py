from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# ‚öôÔ∏è –ê–¥–º—ñ–Ω
ADMIN_USERNAME = "VladislavMorgan2"

# üõí –¢–æ–≤–∞—Ä–∏ (–∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–∞–º'—è—Ç—ñ)
products = [
    {"name": "–§–ª–µ—à–∫–∞ 32–ì–ë", "price": "150 –≥—Ä–Ω", "color": "–ó–æ–ª–æ—Ç–∏—Å—Ç–∏–π, —Å—Ä—ñ–±–ª—è—Å—Ç–∏–π"},
    {"name": "–õ–∏–ø—É—á–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω", "price": "50 –≥—Ä–Ω", "color": "–ß–æ—Ä–Ω–∏–π"}
]

# üèÅ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /products, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏.")

# üì¶ /products
async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(f"{p['name']}", callback_data=f"product_{i}")]
        for i in range(len(products))
    ]
    await update.message.reply_text("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:", reply_markup=InlineKeyboardMarkup(buttons))

# üõç –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    product = products[index]

    text = (
        f"üì¶ –ù–∞–∑–≤–∞: {product['name']}\n"
        f"üí∏ –¶—ñ–Ω–∞: {product['price']}\n"
        f"üé® –ö–æ–ª—ñ—Ä: {product['color']}"
    )

    button = [[InlineKeyboardButton("‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{index}")]]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(button))

# ‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def order_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    username = user.username

    if not username:
        await query.edit_message_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤–∏ username —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram, —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä.")
        return

    index = int(query.data.split("_")[1])
    product = products[index]

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    admin_message = (
        f"üÜï –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üí∏ –¶—ñ–Ω–∞: {product['price']}"
    )

    await query.edit_message_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å.")
    await context.bot.send_message(chat_id=f"@{ADMIN_USERNAME}", text=admin_message)

# üõ† –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä (admin only)
async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏.")
        return

    try:
        data = ' '.join(context.args)
        name, price, color = data.split(";")
        products.append({"name": name.strip(), "price": price.strip(), "color": color.strip()})
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–¥–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /add –ù–∞–∑–≤–∞;–¶—ñ–Ω–∞;–ö–æ–ª—ñ—Ä")

# üßπ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä (admin only)
async def delete_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏.")
        return

    name = ' '.join(context.args).strip()
    for p in products:
        if p['name'].lower() == name.lower():
            products.remove(p)
            await update.message.reply_text(f"üóë –¢–æ–≤–∞—Ä '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
            return

    await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# üöÄ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token("YOUR_BOT_TOKEN").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("products", show_products))
    app.add_handler(CallbackQueryHandler(show_product, pattern="^product_"))
    app.add_handler(CallbackQueryHandler(order_product, pattern="^order_"))
    app.add_handler(CommandHandler("add", add_product))
    app.add_handler(CommandHandler("delete", delete_product))

    print("üü¢ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
    app.run_polling()

if __name__ == "__main__":
    main()
